{"version":3,"sources":["App.tsx","components/ListOfGoods/ListOfGoods.tsx","index.tsx"],"names":["SortType","ListOfGoods","goods","map","good","goodsFromServer","getReorderedGoods","sortType","isReversed","visibleGoods","sort","goodA","goodB","ALPABET","localeCompare","LENGTH","length","reverse","App","useState","NONE","setSortType","setIsReversed","onReorder","className","type","classNames","onClick","value","ReactDOM","render","document","getElementById"],"mappings":"6KAqBKA,E,0ECfQC,EAA+B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC7C,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,SDFnBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UASK,SAASC,EACdJ,EACAK,EACAC,GAGA,IAAMC,EAAY,YAAOP,GAezB,OAZAO,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKP,EAASa,QAAS,OAAOF,EAAMG,cAAcF,GAClD,KAAKZ,EAASe,OAAQ,OAAOJ,EAAMK,OAASJ,EAAMI,OAClD,QAAS,OAAO,MAIhBR,GACFC,EAAaQ,UAGRR,G,SA3BJT,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA8BE,IAAMkB,EAAgB,WAC3B,MAAgCC,mBAASnB,EAASoB,MAAlD,mBAAOb,EAAP,KAAiBc,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBc,EAAnB,KACMC,EAAahB,IAAaP,EAASoB,MAAQZ,EAYjD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,IAAaP,EAASa,UAEtCc,QAnBoB,kBAAMN,EAAYrB,EAASa,UAajD,iCAWA,wBACEY,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYnB,IAAaP,EAASe,SAEtCY,QA7BmB,kBAAMN,EAAYrB,EAASe,SAuBhD,4BAWA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAalB,IAEjBmB,QAvCc,kBAAOL,GAAc,SAAAM,GAAK,OAC7CA,MAgCG,qBAWCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA7CU,WAClBN,EAAYrB,EAASoB,MACrBE,GAAc,IAwCR,sBAUJ,cAAC,EAAD,CACEpB,MAAOI,EAAkBD,EAAiBE,EAAUC,SE/G5DqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.79d1927a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { ListOfGoods } from './components/ListOfGoods';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  visibleGoods.sort((goodA, goodB) => {\n    switch (sortType) {\n      case SortType.ALPABET: return goodA.localeCompare(goodB);\n      case SortType.LENGTH: return goodA.length - goodB.length;\n      default: return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const onReorder = (sortType !== SortType.NONE || isReversed);\n\n  const handleSortByAlpabet = () => setSortType(SortType.ALPABET);\n  const handleSortByLength = () => setSortType(SortType.LENGTH);\n  const handleReverse = () => (setIsReversed(value => (\n    !value\n  )));\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={handleSortByAlpabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {onReorder && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ListOfGoods\n        goods={getReorderedGoods(goodsFromServer, sortType, isReversed)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  goods: string[];\n};\n\nexport const ListOfGoods: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <li data-cy=\"Good\" key={good}>{good}</li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}